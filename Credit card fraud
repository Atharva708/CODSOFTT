import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Load the datasets
train_data = pd.read_csv('fraudTrain.csv')
test_data = pd.read_csv('fraudTest.csv')

# Take a smaller random sample of the data for initial experimentation
train_sample = train_data.sample(frac=0.01, random_state=1)
test_sample = test_data.sample(frac=0.01, random_state=1)

# Drop columns that are not useful for modeling
columns_to_drop = ['Unnamed: 0', 'trans_date_trans_time', 'merchant', 'category', 'first', 'last', 'street', 'city', 'state', 'lat', 'long', 'job', 'zip', 'dob', 'trans_num']
train_sample = train_sample.drop(columns=columns_to_drop)
test_sample = test_sample.drop(columns=columns_to_drop)

# Handle missing values (if any)
train_sample = train_sample.dropna()
test_sample = test_sample.dropna()

# Encode categorical variables
train_sample['gender'] = train_sample['gender'].map({'M': 0, 'F': 1})
test_sample['gender'] = test_sample['gender'].map({'M': 0, 'F': 1})

# Split the training data into features and target
X_train = train_sample.drop('is_fraud', axis=1)
y_train = train_sample['is_fraud']

X_test = test_sample.drop('is_fraud', axis=1)
y_test = test_sample['is_fraud']

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train and evaluate models

# Logistic Regression
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)
y_pred_log_reg = log_reg.predict(X_test)
print("Logistic Regression:")
print(classification_report(y_test, y_pred_log_reg))
print(f"Accuracy: {accuracy_score(y_test, y_pred_log_reg)}\n")

# Decision Tree
tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)
y_pred_tree = tree.predict(X_test)
print("Decision Tree:")
print(classification_report(y_test, y_pred_tree))
print(f"Accuracy: {accuracy_score(y_test, y_pred_tree)}\n")

# Random Forest
forest = RandomForestClassifier()
forest.fit(X_train, y_train)
y_pred_forest = forest.predict(X_test)
print("Random Forest:")
print(classification_report(y_test, y_pred_forest))
print(f"Accuracy: {accuracy_score(y_test, y_pred_forest)}\n")
