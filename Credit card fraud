import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Define file paths here
TRAIN_FILE_PATH = '/Users/atharva/Downloads/archive/fraudTrain.csv'
TEST_FILE_PATH = '/Users/atharva/Downloads/archive/fraudTest.csv'

def load_data(train_path, test_path):
    train_data = pd.read_csv(train_path)
    test_data = pd.read_csv(test_path)
    return train_data, test_data

def preprocess_data(train_data, test_data):
    # Drop 'Unnamed: 0' column
    train_data = train_data.drop(columns='Unnamed: 0')
    test_data = test_data.drop(columns='Unnamed: 0')

    # Initialize LabelEncoder
    encoder = LabelEncoder()
    
    # Encode categorical columns
    for column in ['merchant', 'category', 'street', 'job', 'trans_num', 'first', 'city', 'state', 'last', 'gender', 'trans_date_trans_time', 'dob']:
        train_data[column] = encoder.fit_transform(train_data[column])
        test_data[column] = encoder.transform(test_data[column])
    
    return train_data, test_data

def split_data(train_data, test_data):
    x_train = train_data.drop(columns='is_fraud')
    y_train = train_data['is_fraud']
    x_test = test_data.drop(columns='is_fraud')
    y_test = test_data['is_fraud']
    return x_train, y_train, x_test, y_test

def build_and_evaluate_models(x_train, y_train, x_test, y_test):
    # Initialize models
    modelLR = LogisticRegression(max_iter=1000)
    modelRF = RandomForestClassifier()
    modelDT = DecisionTreeClassifier()

    # Fit models
    modelLR.fit(x_train, y_train)
    modelRF.fit(x_train, y_train)
    modelDT.fit(x_train, y_train)

    # Predictions
    predictionsLR = modelLR.predict(x_test)
    predictionsRF = modelRF.predict(x_test)
    predictionsDT = modelDT.predict(x_test)

    # Evaluation
    cmLR = confusion_matrix(y_test, predictionsLR)
    cmRF = confusion_matrix(y_test, predictionsRF)
    cmDT = confusion_matrix(y_test, predictionsDT)
    
    sns.heatmap(data=cmRF, cmap='Blues', annot=True)
    plt.title('Random Forest Confusion Matrix')
    plt.show()

    accuracyLR = accuracy_score(y_test, predictionsLR)
    accuracyRF = accuracy_score(y_test, predictionsRF)
    accuracyDT = accuracy_score(y_test, predictionsDT)

    return accuracyLR, accuracyRF, accuracyDT

def main():
    # Load and preprocess data
    train_data, test_data = load_data(TRAIN_FILE_PATH, TEST_FILE_PATH)
    train_data, test_data = preprocess_data(train_data, test_data)

    # Split data
    x_train, y_train, x_test, y_test = split_data(train_data, test_data)

    # Build and evaluate models
    accuracyLR, accuracyRF, accuracyDT = build_and_evaluate_models(x_train, y_train, x_test, y_test)

    print(f"Logistic Regression Accuracy: {accuracyLR}")
    print(f"Random Forest Accuracy: {accuracyRF}")
    print(f"Decision Tree Accuracy: {accuracyDT}")

if __name__ == "__main__":
    main()
